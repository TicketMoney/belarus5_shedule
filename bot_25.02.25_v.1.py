import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram import F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import docx
import mimetypes
import json
from aiogram.types import BotCommand

async def set_bot_commands():
    commands = [
        BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/info", description="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"),
        BotCommand(command="/add_user", description="üôãüèª‚Äç‚ôÇÔ∏è –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="/remove_user", description="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏"),
        BotCommand(command="/list_users", description="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        BotCommand(command="/alert_schedule_change", description="‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"),
        BotCommand(command="/send_message", description="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"),
        BotCommand(command="/stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand(command="/clear_stats", description="‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    ]
    await bot.set_my_commands(commands)

USER_FILE = "users.json"

STATS_FILE = "stats.json"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
def load_stats():
    default_stats = {
        "total_users": 0,
        "last_sent": 0,
        "read_messages": 0,
        "confirmed_read": 0,
        "reminders_sent": 0
    }
    try:
        with open(STATS_FILE, "r", encoding="utf-8") as file:
            loaded_stats = json.load(file)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ –Ω–µ—Ç –∫–∞–∫–∏—Ö-—Ç–æ –∫–ª—é—á–µ–π
            for key in default_stats:
                if key not in loaded_stats:
                    loaded_stats[key] = default_stats[key]
            return loaded_stats
    except (FileNotFoundError, json.JSONDecodeError):
        return default_stats


# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª
def save_stats(stats):
    with open(STATS_FILE, "w", encoding="utf-8") as file:
        json.dump(stats, file, indent=4, ensure_ascii=False)

def load_stats():
    default_stats = {
        "total_users": 0,         # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        "users_received": 0,      # –ö—Ç–æ –ø–æ–ª—É—á–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        "users_no_schedule": 0,   # –ö–æ–º—É –ø—Ä–∏—à–ª–æ "–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç"
        "read_messages": 0,       # –ö—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —á—Ç–µ–Ω–∏–µ
        "reminders_sent": 0       # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    }

    try:
        with open(STATS_FILE, "r", encoding="utf-8") as file:
            stats = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        stats = {}

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ –µ—Å—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∫–ª—é—á–∏
    for key in default_stats:
        if key not in stats:
            stats[key] = default_stats[key]

    with open(STATS_FILE, "w", encoding="utf-8") as file:
        json.dump(stats, file, indent=4, ensure_ascii=False)

    return stats


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_users():
    try:
        with open("users.json", "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        print("‚ö†Ô∏è –§–∞–π–ª users.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π...")
        return {}
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ users.json! –ü—Ä–æ–≤–µ—Ä—å JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
        return {}

user_keywords = load_users()
print("üîπ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", user_keywords)  # –û—Ç–ª–∞–¥–∫–∞
stats_data = load_stats()
save_stats(stats_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ —á–µ–≥–æ-—Ç–æ –Ω–µ –±—ã–ª–æ)
print("üîπ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", stats_data)

def save_users():
    with open("users.json", "w", encoding="utf-8") as file:
        json.dump(user_keywords, file, indent=4, ensure_ascii=False)

API_TOKEN = '7707399273:AAGy66uY5HI2UipqZX1ogChK3L74Wgtl9cU'  # üîπ –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMIN_ID = 440618281  # üîπ –í–∞—à Telegram ID (—á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üîπ –ë–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
router = Router()

# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π ID"
def get_id_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π ID –∞–¥–º–∏–Ω—É", callback_data="send_my_id")]
        ]
    )
    return keyboard

# üîπ –¢–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞
BOT_DESCRIPTION = (
    "üì∫ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Ç–µ–ª–µ–∫–∞–Ω–∞–ª–∞ ¬´–ë–µ–ª–∞—Ä—É—Å—å 5¬ª!</b>\n\n"
    "–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º <b>—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π</b>.\n"
    "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ <b>–æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –≤–∞–º</b>.\n\n"
    "üì© <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
    "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à ID –∞–¥–º–∏–Ω—É, —á—Ç–æ–±—ã –æ–Ω –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ —Ä–∞—Å—Å—ã–ª–∫—É.\n"
    "2Ô∏è‚É£ –ö–æ–≥–¥–∞ –≤—ã—Ö–æ–¥–∏—Ç –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –≤–∞—à –≥—Ä–∞—Ñ–∏–∫.\n"
    "3Ô∏è‚É£ –í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –±–æ—Ç—É ‚Äî –æ–Ω –≤—Å–µ –¥–µ–ª–∞–µ—Ç —Å–∞–º!\n\n"
    "‚¨áÔ∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à ID –∞–¥–º–∏–Ω—É."
)

# üîπ –ö–æ–º–∞–Ω–¥–∞ /info
@router.message(F.text == "/info")
async def send_info(message: types.Message):
        user_id = message.from_user.id

        # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        commands = [
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
            "/info - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
        ]

        # –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_commands = [
            "/add_user &lt;ID&gt; &lt;–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ&gt; - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞—Å—Å—ã–ª–∫—É",
            "/remove_user &lt;ID&gt; - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏",
            "/list_users - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–∞—Å—Å—ã–ª–∫–µ",
            "/alert_schedule_change - –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏",
            "/send_message &lt;–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞&gt;, &lt;–°–æ–æ–±—â–µ–Ω–∏–µ&gt; - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º",
        ]

        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if user_id == ADMIN_ID:
            commands += admin_commands

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        info_message = "<b>üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n" + "\n".join(commands)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(user_id, info_message, parse_mode="HTML")

# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(F.text == "/start")
async def start_command(message: types.Message):
    await message.reply(BOT_DESCRIPTION, reply_markup=get_id_keyboard())

# üîπ –ö–æ–º–∞–Ω–¥–∞ /list_users (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@router.message(F.text == "/list_users")
async def list_users_command(message: types.Message):
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º users.json –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ø–∏—Å–∫–∞
    try:
        with open(USER_FILE, "r", encoding="utf-8") as f:
            user_keywords = json.load(f)  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    except FileNotFoundError:
        user_keywords = {}

    if not user_keywords:
        await message.reply("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    users_text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user_id, keyword in user_keywords.items():
        users_text += f"üÜî ID: {user_id} ‚Äî üîë –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}\n"

    await message.reply(users_text)

import matplotlib.pyplot as plt
import io

@router.message(F.text.startswith("/stats"))
async def send_stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    @router.message(F.text == "/clear_stats")
    async def clear_stats(message: types.Message):
        if message.from_user.id != ADMIN_ID:
            await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_data.update({
            "total_users": len(user_keywords),  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è
            "last_sent": 0,
            "read_messages": 0,
            "confirmed_read": 0,
            "reminders_sent": 0
        })

        save_stats(stats_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

        await message.reply("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
        logging.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    stats_data["total_users"] = len(user_keywords)
    save_stats(stats_data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    stats_text = (
        "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats_data['total_users']}\n"
        f"‚úÖ <b>–ü–æ–ª—É—á–∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b> {stats_data['users_received']}\n"
        f"‚ö†Ô∏è <b>–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:</b> {stats_data['users_no_schedule']}\n"
        f"üëÄ <b>–ü—Ä–æ—á–∏—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> {stats_data.get('read_messages', 0)}\n"
        f"‚è∞ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:</b> {stats_data.get('reminders_sent', 0)}\n"
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    photo = generate_stats_chart(stats_data)
    await bot.send_photo(message.chat.id, photo, caption=stats_text)


# üîπ –ö–æ–º–∞–Ω–¥–∞ /alert_schedule_change (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@router.message(F.text == "/alert_schedule_change")
async def alert_schedule_change_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    alert_text = "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏!</b>\n–ü—Ä–æ—Å—å–±–∞ —É—Ç–æ—á–Ω–∏—Ç—å."
    sent_count = 0

    for user_id in user_keywords.keys():
        try:
            await bot.send_message(user_id, alert_text)
            sent_count += 1
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await message.reply(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}/{len(user_keywords)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# üîπ –ö–æ–º–∞–Ω–¥–∞ /add_user (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@router.message(F.text.startswith("/add_user"))
async def add_user_command(message: types.Message):
    try:
        _, user_id, keyword = message.text.split(maxsplit=2)

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            with open(USER_FILE, "r", encoding="utf-8") as f:
                user_keywords = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            user_keywords = {}

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_keywords[user_id] = keyword

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
        with open(USER_FILE, "w", encoding="utf-8") as f:
            json.dump(user_keywords, f, ensure_ascii=False, indent=4)

        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '{keyword}'.")

    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_user [ID] [–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ]")

# üîπ –ö–æ–º–∞–Ω–¥–∞ /remove_user (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@router.message(F.text.startswith("/remove_user"))
async def remove_user_command(message: types.Message):
    try:
        _, user_id = message.text.split(maxsplit=1)

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            with open(USER_FILE, "r", encoding="utf-8") as f:
                user_keywords = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            user_keywords = {}

        if user_id in user_keywords:
            del user_keywords[user_id]  # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞

            # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
            with open(USER_FILE, "w", encoding="utf-8") as f:
                json.dump(user_keywords, f, ensure_ascii=False, indent=4)

            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω.")
        else:
            await message.reply("‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remov_user [ID]")

@router.message(F.text.startswith("/send_message"))
async def send_custom_message(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ —Ä–∞–∑–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    command_text = message.text[len("/send_message"):].strip()
    if not command_text:
        await message.reply("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: `/send_message –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –î—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ, —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è`")
        return

    # –û—Ç–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        keywords_part, message_text = command_text.split(",", 1)
        keywords = [kw.strip().lower() for kw in keywords_part.split(",")]
    except ValueError:
        await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø—è—Ç—É—é –º–µ–∂–¥—É –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        return

    sent_count = 0
    report_message = "<b>üì¢ –û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ:</b>\n\n"

    for user_id, keyword in user_keywords.items():
        if keyword.lower() in keywords:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–∫–µ
            try:
                await bot.send_message(user_id, f"üì¢ {message_text}")
                sent_count += 1
                report_message += f"‚úÖ <b>{user_id}</b> ‚Äî {keyword}\n"
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                report_message += f"‚ùå <b>{user_id}</b> ‚Äî {keyword} (–û—à–∏–±–∫–∞)\n"

    report_message += f"\nüì® <b>–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {sent_count}/{len(keywords)}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –æ—Ç—á–µ—Ç
    try:
        await bot.send_message(ADMIN_ID, report_message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π ID"
@router.callback_query(F.data == "send_my_id")
async def send_user_id(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username
    username_text = f"@{username}" if username else "–ù–µ—Ç username"

    message_to_admin = (
        "üì© <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–π ID:</b>\n\n"
        f"üÜî <b>ID:</b> {user_id}\n"
        f"üë§ <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {username_text}"
    )

    try:
        await bot.send_message(ADMIN_ID, message_to_admin)
        await callback.message.answer("‚úÖ –í–∞—à ID —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É! –û–∂–∏–¥–∞–π—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞—Å—Å—ã–ª–∫—É.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ID –∞–¥–º–∏–Ω—É: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ID –∞–¥–º–∏–Ω—É.")

    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ—Ç "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ


# üîπ –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (—á—Ç–æ–±—ã –ø–æ—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö –ø–æ –∫–Ω–æ–ø–∫–µ)
pending_files = {}

# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
def get_confirmation_keyboard(file_name):
    file_id = str(abs(hash(file_name)))  # –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data=f"confirm_send:{file_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_send:{file_id}")]
        ]
    )
    return keyboard

# üîπ –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
def extract_matching_rows(file_path, keyword):
    logger.info(f"üîç –ò—â–µ–º —Å–ª–æ–≤–æ '{keyword}' –≤ —Ñ–∞–π–ª–µ {file_path}")

    mime_type, _ = mimetypes.guess_type(file_path)
    if mime_type != 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
        raise ValueError(f"–§–∞–π–ª {file_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–º Word.")

    doc = docx.Document(file_path)
    matching_rows = []

    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                if keyword.lower() in cell.text.lower():
                    matching_rows.append(row.cells)
                    break

    return matching_rows

# üîπ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É
async def send_schedule_to_users(file_name, admin_id):
    sent_count = 0
    report_message = "<b>üì¢ –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:</b>\n\n"

    users_received_schedule = []  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    users_no_schedule = []  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∑–∞–ø–∏—Å–µ–π
    stats_data["users_received"] = 0
    stats_data["users_no_schedule"] = 0

    for user_id, keyword in user_keywords.items():
        matching_rows = extract_matching_rows(file_name, keyword)

        if not matching_rows:
            message_text = "‚ö†Ô∏è <b>–î–ª—è –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.</b>"
            users_no_schedule.append(f"{user_id} ‚Äî {keyword}")  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            stats_data["users_no_schedule"] += 1
        else:
            message_text = "<b>üìã –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n"

            for row in matching_rows:
                try:
                    date = row[0].text.strip()
                    time = row[1].text.strip()
                    chron = row[2].text.strip()
                    fourth_column = row[3].text.strip()
                    creative_team = row[4].text.strip()
                    note = row[5].text.strip()

                    message_text += (
                        f"üìÖ <b>–î–∞—Ç–∞:</b> {date}\n"
                        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {time}\n"
                        f"‚è≥ <b>–•—Ä–æ–Ω:</b> {chron}\n"
                        f"üìå <b>4-–π —Å—Ç–æ–ª–±–µ—Ü:</b> {fourth_column}\n"
                        f"üé• <b>–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –±—Ä–∏–≥–∞–¥–∞:</b> {creative_team}\n"
                        f"üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {note}\n"
                        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    )
                except IndexError:
                    continue

            users_received_schedule.append(f"{user_id} ‚Äî {keyword}")  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            stats_data["users_received"] += 1

        try:
            await bot.send_message(user_id, message_text)
            stats_data["last_sent"] += 1
            save_stats(stats_data)
            sent_count += 1
            stats_data["read_messages"] += 1
            save_stats(stats_data)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            report_message += f"‚ùå <b>{user_id}</b> ‚Äî {keyword} (–û—à–∏–±–∫–∞)\n"
    save_stats(stats_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    # üîπ –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –±–µ–∑
    if users_received_schedule:
        report_message += "\n‚úÖ <b>–ü–æ–ª—É—á–∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n" + "\n".join(users_received_schedule)

    if users_no_schedule:
        report_message += "\n‚ö†Ô∏è <b>–ë–µ–∑ –∑–∞–ø–∏—Å–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:</b>\n" + "\n".join(users_no_schedule)

    report_message += f"\nüì® <b>–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {sent_count}/{len(user_keywords)}"

    try:
        await bot.send_message(admin_id, report_message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏)
@router.message(F.document)
async def handle_docs(message: types.Message):
    file_name = message.document.file_name
    file_id = str(abs(hash(file_name)))  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è —Ñ–∞–π–ª–∞
    pending_files[file_id] = file_name   # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å ID

    try:
        file_path = await bot.get_file(message.document.file_id)
        await bot.download_file(file_path.file_path, file_name)
        logger.info(f"üìÇ –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
    except Exception:
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.")
        return

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
    await bot.send_message(
        ADMIN_ID,
        f"üìÇ <b>–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:</b> {file_name}\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=get_confirmation_keyboard(file_name)
    )

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
@router.callback_query(F.data.startswith("confirm_send:"))
async def confirm_sending(callback: types.CallbackQuery):
    file_id = callback.data.split(":")[1]

    if file_id in pending_files:
        file_name = pending_files[file_id]
        await callback.message.edit_text(f"üì¢ <b>–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...</b>")
        await send_schedule_to_users(file_name, ADMIN_ID)
        await callback.message.edit_text(f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>")
        del pending_files[file_id]  # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è
    else:
        await callback.message.edit_text("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await callback.answer()

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
@router.callback_query(F.data.startswith("cancel_send:"))
async def cancel_sending(callback: types.CallbackQuery):
    file_id = callback.data.split(":")[1]

    if file_id in pending_files:
        await callback.message.edit_text(f"‚ùå <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>")
        del pending_files[file_id]  # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è
    else:
        await callback.message.edit_text("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await callback.answer()

def generate_stats_chart(data):
    labels = ["–ü–æ–ª—É—á–∏–ª–∏\n —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π", "–ü—Ä–æ—á–∏—Ç–∞–ª–∏", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"]
    values = [
        data["users_received"],
        data["users_no_schedule"],
        data["read_messages"],
        data["reminders_sent"]
    ]
    plt.figure(figsize=(6, 4))
    plt.bar(labels, values, color=["blue", "green", "red"])
    plt.title("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
    plt.xlabel("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    plt.grid(axis="y", linestyle="--", alpha=0.7)

    # Save to temp file
    plt.savefig('stats_chart.png')
    plt.close()

    # Return as InputFile
    return types.FSInputFile('stats_chart.png')


async def main():
    dispatcher = Dispatcher()
    dispatcher.include_router(router)
    await bot.delete_webhook()
    await set_bot_commands()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    await dispatcher.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
